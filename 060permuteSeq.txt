给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。

按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：

"123"
"132"
"213"
"231"
"312"
"321"
给定 n 和 k，返回第 k 个排列。

说明：

给定 n 的范围是 [1, 9]。
给定 k 的范围是[1,  n!]。
示例 1:

输入: n = 3, k = 3
输出: "213"
示例 2:

输入: n = 4, k = 9
输出: "2314"

class Solution {
public:
    string getPermutation(int n, int k) {
        string s = "";
        for(int i = 1;i <= n;i++){
            s += i + '0';
        }
        for(int i = 1;i < k;i++){
            nextPermute(s);
        }
        return s;
    }
    
    bool nextPermute(string &s) {
        int i = s.length() - 2;
        while(i >= 0 && s[i] >= s[i+1]) i--;
        if(i >= 0) {
            int j = s.length() - 1;
            while(j >= i && s[j] <= s[i]) j--;
            swap(s[i],s[j]);
        }
        else return false;
        int start = i + 1;
        int end = s.length() - 1;
        while(start < end) {
            swap(s[start],s[end]);
            start++;
            end--;
        }
        return true;
    }
};

// 康托 展开
class Solution {
public:
    string getPermutation(int n, int k) {
        string res;
        string num = "123456789";
        vector<int> f(n, 1);
        for (int i = 1; i < n; ++i) f[i] = f[i - 1] * i;
        --k;
        for (int i = n; i >= 1; --i) {
            int j = k / f[i - 1];
            k %= f[i - 1];
            res.push_back(num[j]);
            num.erase(j, 1);
        }
        return res;
    }
};