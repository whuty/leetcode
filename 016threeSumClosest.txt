
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

static const auto _____ = []() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
};
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int closest = nums[0] + nums[1] + nums[2];
        sort(nums.begin(), nums.end());
        if (nums.size() == 3) return closest;
        int sum;
        for (int i = 0; i < nums.size() - 2; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            // two sum;
            int l = i + 1, r = nums.size() - 1;
            
            while (l < r) {
                sum = nums[i] + nums[l] + nums[r];
                if (sum == target) return target;
                if (abs(sum - target) < abs(closest - target))
                    closest = sum;
                if (sum < target) {
                    //while (start < end && nums[start] == nums[start + 1]) ++start;
                    l++;
                } else {
                    //while (start < end && nums[end] == nums[end - 1]) --end;
                    r--;
                }
                
            }
        }
        
        return closest;
    }
};