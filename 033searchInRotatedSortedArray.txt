
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0;
        int r = n - 1;
        int m;
        while(l <= r) {
            if(nums[l] == target) return l;
            if(nums[r] == target) return r;
            m = (l + r) / 2;
            if(nums[m] == target) return m;
            if(nums[m] < nums[r]) {
                if(target > nums[m] && target < nums[r]) l = m + 1;
                else r = m - 1;
            }
            else {
                if(target < nums[m] && target > nums[r]) r = m - 1;
                else l = m + 1;
            }
        }
        return -1;
    }
};