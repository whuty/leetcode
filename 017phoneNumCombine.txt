
给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

示例:

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。

static const auto _____ = []() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
};
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.empty()) return res;
        map<char,vector<char> > m;
        m['2'] = {'a','b','c'};
        m['3'] = {'d','e','f'};
        m['4'] = {'g','h','i'};
        m['5'] = {'j','k','l'};
        m['6'] = {'m','n','o'};
        m['7'] = {'p','q','r','s'};
        m['8'] = {'t','u','v'};
        m['9'] = {'w','x','y','z'};
        
        int n = digits.length();
        int index[n] = {0};
        
        while(index[0] < m[digits[0]].size()){
            string s = "";
            for(int i = 0;i < n;i++){
                char c = m[digits[i]][index[i]];
                s += c;
            }
            res.push_back(s);
            int k = n - 1;
            index[k]++;
            
            while(k > 0 && index[k] == m[digits[k]].size()){
                index[k] = 0;
                index[--k]++;
            }
            
        }
        return res;
    }
};