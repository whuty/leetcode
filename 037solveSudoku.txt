
编写一个程序，通过已填充的空格来解决数独问题。

#python3

from itertools import product
class Solution(object):
    def exact_cover(self, X, Y):
        X = {j: set() for j in X}
        for i, row in Y.items():
            for j in row:
                X[j].add(i)
        return X, Y

    def solve(self, X, Y, solution):
        if not X:
            yield list(solution)
        else:
            c = min(X, key=lambda c: len(X[c]))
            for r in list(X[c]):
                solution.append(r)
                cols = self.select(X, Y, r)
                for s in self.solve(X, Y, solution):
                    yield s
                self.deselect(X, Y, r, cols)
                solution.pop()

    def select(self, X, Y, r):
        cols = []
        for j in Y[r]:
            for i in X[j]:
                for k in Y[i]:
                    if k != j:
                        X[k].remove(i)
            cols.append(X.pop(j))
        return cols

    def deselect(self, X, Y, r, cols):
        for j in reversed(Y[r]):
            X[j] = cols.pop()
            for i in X[j]:
                for k in Y[i]:
                    if k != j:
                        X[k].add(i)
                        
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        
        R, C = (3,3)
        N = R * C
        X = ([("rc", rc) for rc in product(range(N), range(N))] +
             [("rn", rn) for rn in product(range(N), range(1, N + 1))] +
             [("cn", cn) for cn in product(range(N), range(1, N + 1))] +
             [("bn", bn) for bn in product(range(N), range(1, N + 1))])
        Y = dict()
        for r, c, n in product(range(N), range(N), range(1, N + 1)):
            b = (r // R) * R + (c // C) # Box number
            Y[(r, c, n)] = [
                ("rc", (r, c)),
                ("rn", (r, n)),
                ("cn", (c, n)),
                ("bn", (b, n))]
        X, Y = self.exact_cover(X, Y)
        for i, row in enumerate(board):
            for j, n in enumerate(row):
                if (n != "."):
                    n = int(n)
                    self.select(X, Y, (i, j, n))
        solution = next(self.solve(X, Y, []))
        for (r, c, n) in solution:
            board[r][c] = str(n)
        #yield


// cpp 4ms backtracking
class Solution {
    void Initialize(vector<vector<char>>& board, bool rowHash[9][9], bool colHash[9][9], bool boxHash[9][9] ) {
        for(int row=0; row < 9; ++row){
            for(int col = 0; col < 9; ++col){
                if(board[row][col] != '.'){
                    int realnum = board[row][col] - '1';
                    int boxnum = 3 * (row / 3) + (col/3);
                    
                    rowHash[row][realnum] = true;                 
                    colHash[col][realnum] = true;
                    boxHash[boxnum][realnum] = true;
                }
            }
        }
    }
    
    bool SolveWithBacktracking(int r, int c, vector<vector<char>>& board, bool rowHash[9][9], bool colHash[9][9], bool boxHash[9][9]){
        // fix terminating condition
        if(c > 8){
            ++r;
            if(r>8)
                return true; // found solution
            
            c=0;
        }

        if(board[r][c] == '.'){
            int boxnum = 3 * (r / 3) + (c/3);
            // try all characters at current location
            for(auto num = '1'; num <= '9'; ++num){
                int realnum = num-'1';
                if(!rowHash[r][realnum] && !colHash[c][realnum] && !boxHash[boxnum][realnum]){
                    rowHash[r][realnum] = true;                 
                    colHash[c][realnum] = true;
                    boxHash[boxnum][realnum] = true;
                    board[r][c] = num;
                    
                    auto result = SolveWithBacktracking(r, c+1, board, rowHash, colHash, boxHash);
                    if(result)
                        return true;
                    
                    // backtrack otherwise
                    rowHash[r][realnum] = false;                 
                    colHash[c][realnum] = false;
                    boxHash[boxnum][realnum] = false;
                }
            }
            
            board[r][c] = '.';
            return false;
        }
        else{
            return SolveWithBacktracking(r, c+1, board, rowHash, colHash, boxHash);
        }
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        bool rowHash[9][9] = {false};
        bool colHash[9][9] = {false};
        bool boxHash[9][9] = {false};
        Initialize(board, rowHash, colHash, boxHash); 
        SolveWithBacktracking(0, 0, board, rowHash, colHash, boxHash);
    }
};

// cpp 0ms
class Solution {
    // Table which allows compute the value of the cell
    // from the unambiguous bit mask as maskToValue[(mask%11)-1] 
    // uses the fact that (1<<i)%11 is unique for i = [0..8] and never produces 0
    const char maskToValue[10] = {'1','2','9','3','5','6','8','4','7','6'};
    struct SudokuSolver {
        // Using mask for each cell which constraints values which can be in the cell
        // Yeap, it is more storage, comparing to rows/cols/sqrs approach
        // but it allows to do super-fast reactive constraint propagation
        array<array<uint16_t,9>,9> board;
        SudokuSolver()
        {
            // Initializing the board with mask, which permits all numbers
            for (int i=0; i<9; i++)
                for (int j=0; j<9; j++)
                    board[i][j] = 0x1ff;
        }
        
        // adds value v [1..9] to the board, return false if it violates constraints
        bool add(int i, int j, int v)
        {
            return set(i, j, 1<<(v-1));
        }

        // set a value mask to the cell (i,j) and reactively updates constraints
        bool set(int i, int j, uint16_t mask)
        {
            int16_t prev = board[i][j];
            if (prev == mask) return true;
            if (!(prev&mask)) return false;
            board[i][j] = mask;
            return propagate(i,j,mask);
        }
        
        // propagates constraints as a result of setting i,j to mask
        bool propagate(int i, int j, uint16_t mask)
        {
            for (int k=0; k<9; k++) {
                if (k!=j && !addConstraint(i, k, mask)) return false;
                if (k!=i && !addConstraint(k, j, mask)) return false;
                int ii = (i/3)*3 + (k/3);
                int jj = (j/3)*3 + (k%3);
                if ((i != ii || j != jj) && !addConstraint(ii, jj, mask)) return false;
            }
            return true;
        }
        
        // prohibits putting value in mask to the cell (i,j)
        bool addConstraint(int i, int j, uint16_t mask)
        {
            int16_t newMask = board[i][j] &~ mask;
            if (newMask != board[i][j]) {
                if (newMask == 0) return false;
                board[i][j] = newMask;
                if (((newMask-1)&newMask)==0) {
                    // good news - we have only one possibility for the cell (i,j)
                    return propagate(i, j, newMask);
                }
            }
            return true;
        }
        
        // list of cell coordinates with >1 possibilities for values
        vector<pair<int,int>> v;
        void solve()
        {
            // finding all ambiguous cells
            for (int i=0; i<9; i++) {
                for (int j=0; j<9; j++) {
                    uint16_t mask = board[i][j];
                    if (mask&(mask-1)) v.push_back(make_pair(i,j));
                }
            }
            // note: it is also a good idea to sort v by the hamming weight, but
            // without sorting it is still super-fast
            // running backtracking as is
            backtrack(0);
        }

        // backtracking        
        bool backtrack(int k) {
            if (k == v.size()) return true;
            int i = v[k].first;
            int j = v[k].second;
            uint16_t mask = board[i][j];
            if (mask&(mask-1)) {
                // the board state is so compact and backtracking depth is so shallow, so
                // it is cheaper to make a snapshot of the state vs. doing classical
                // undo at each move
                auto snapshot = board;
                for (uint16_t cand = 1; cand<=0x1ff; cand = cand <<1) {
                    if (set(i, j, cand) && backtrack(k+1)) return true;
                    board = snapshot;
                }
                return false;
            }
            else {
                return backtrack(k + 1);
            }
        }
        
    };
    
public:
    void solveSudoku(vector<vector<char>>& board) {
        SudokuSolver solver;
        for (int i=0; i<9; i++) {
            for (int j=0; j<9; j++) {
                char c = board[i][j];
                if (c != '.' && !solver.add(i,j,c-'0')) return;
            }
        }
        // At this point 9 of 10 sudokus published in magazines will be solved by constraint propagation
        // only 'hard' sudokus will require some (limited) backtracking 
        solver.solve();
        for (int i=0; i<9; i++)
            for (int j=0; j<9; j++)
                board[i][j] = maskToValue[(solver.board[i][j]%11)-1];
    }
};