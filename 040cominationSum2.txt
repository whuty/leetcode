static auto x = [](){
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    return 0;
}();
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> solution;
        sort(candidates.begin(), candidates.end());
        dfs(candidates, target, 0, solution, res);
        return res;
    }
    
    void dfs(vector<int>& candidates, int target, int index, vector<int>& solution, vector<vector<int>>& res) {
        if(target == 0) {
            res.push_back(solution);
        }
        for(int i = index;i < candidates.size(); i++) {
            if (i > index && candidates[i] == candidates[i - 1]) continue;
            if(target < candidates[i]) return;
            solution.push_back(candidates[i]);
            dfs(candidates, target - candidates[i], i + 1, solution, res);
            solution.pop_back();
        }
    }
};