给出一个无重叠的 ，按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。

示例 1:

输入: intervals = [[1,3],[6,9]], newInterval = [2,5]
输出: [[1,5],[6,9]]
示例 2:

输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出: [[1,2],[3,10],[12,16]]
解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
  /**
   * Insert newInterval into intervals.
   * @param intervals: Sorted interval list.
   * @param newInterval: new interval.
   * @return: A new interval list.
   */
  vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
    vector<Interval> ans;
    int st;
    for (st = 0; st < intervals.size() && intervals[st].start < newInterval.start; st++) { 
      ans.push_back(intervals[st]);
    } 
      
    if (!ans.empty() && ans.back().end >= newInterval.start) { 
      ans.back().end = max(ans.back().end, newInterval.end);
    } else { 
      ans.push_back(newInterval);    
     } 
     
    for (int i = st; i < intervals.size(); i++) { 
      if (ans.back().end >= intervals[i].start) { 
        ans.back().end = max(ans.back().end, intervals[i].end);
      } else { 
        ans.push_back(intervals[i]);
      } 
    } 
    return ans;  
  }
};