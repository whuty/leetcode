给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。

示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

static const auto __ = []()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	return nullptr;
}();
class Solution {
public:
    bool canJump(vector<int>& nums) {
        if(nums.empty()) return false;
        return search(nums.size()-1,nums);
        
    }
    
    bool search(int goal,vector<int>& nums) {
        if(goal == 0) return true;
        for(int i = goal - 1;i >= 0;i--){
            if(i + nums[i] >= goal) {
                return search(i,nums);
            }
        }
        return false;
    }
};

class Solution {
public:
    int my_max(int a, int b){
        if(a>b)
            return a;
        return b;
    }
    bool canJump(vector<int>& nums) {
        int maxcan=0;
        for(int i(0);i<=maxcan && i<nums.size();i++){
            maxcan=my_max(maxcan, i+nums[i]);
        }
        return (maxcan>=(nums.size()-1));
    }
};