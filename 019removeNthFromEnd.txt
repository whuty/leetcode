
给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1->2->3->4->5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1->2->3->5.
说明：

给定的 n 保证是有效的。

进阶：

你能尝试使用一趟扫描实现吗？


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* end = head;
        ListNode* node = head;
        for(int i = 0;i < n;i++) {
            if(end->next == NULL) return head->next;
            end = end->next;
        }
        while(end->next != NULL){
            node = node->next;
            end = end->next;
        }
        node->next = node->next->next;
        return head;
    }
};

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head) return head; 
        ListNode* guard = new ListNode(0); 
        guard->next = head; 
        ListNode* slow = guard; 
        ListNode* fast = guard; 
        // guard->1->2->3->4->5
        //              s
        //                    f
        for ( int i = 0; i<n; i++){
            fast = fast->next; 
        }
        while(fast->next){
            slow = slow->next;
            fast = fast->next;
        }
        slow->next = slow->next->next; 
        return guard->next; 
    }
};